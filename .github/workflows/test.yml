# .github/workflows/test.yml
name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-mssql:
    name: Test with MSSQL
    runs-on: ubuntu-latest
    
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest 
        env:
          ACCEPT_EULA: Y
          MSSQL_PID: Developer
          MSSQL_SA_PASSWORD: P@ssw0rd2024
        ports:
          - 1433:1433
        options: >-
          --memory 2g
          --memory-reservation 2g

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install ODBC Driver and Tools
      run: |
        # Import Microsoft repository key
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        
        # Add Microsoft repository for Ubuntu 20.04
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
        
        # Update package list
        sudo apt-get update
        
        # Install ODBC Driver and tools
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17 mssql-tools unixodbc-dev
        
        # Add SQL Server tools to path
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
        source ~/.bashrc
        
        # Verify driver installation and configuration
        echo "Checking ODBC installation..."
        sudo odbcinst -j
        echo "Available ODBC drivers:"
        sudo odbcinst -q -d
        echo "Driver locations:"
        ls -l /opt/microsoft/msodbcsql17/lib64/libmsodbcsql-17.*
        echo "Driver configuration:"
        cat /etc/odbcinst.ini
        
        # Ensure proper permissions
        sudo chmod 644 /etc/odbcinst.ini
        sudo chmod 755 /opt/microsoft/msodbcsql17/lib64/libmsodbcsql-17.*
        
        # Create a test DSN to verify configuration
        echo "[MSSQL]
        Driver = ODBC Driver 17 for SQL Server
        Server = localhost,1433
        Database = master" | sudo tee /etc/odbc.ini
        
        # Show final ODBC configuration
        echo "Final ODBC configuration:"
        cat /etc/odbc.ini
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
        
    - name: Verify installation
      run: |
        # Show Python path
        python -c "import sys; print('\n'.join(sys.path))"
        # Try importing the module
        python -c "import mssql_mcp_server; print('Module found at:', mssql_mcp_server.__file__)"
        # List installed packages
        pip list | grep mssql
        # Show the content of site-packages
        ls -R $(python -c "import site; print(site.getsitepackages()[0])")
        # Verify ODBC drivers
        python -c "import pyodbc; print('Available ODBC drivers:', pyodbc.drivers())"

    - name: Wait for SQL Server
      run: |
        for i in {1..60}; do
          if /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P P@ssw0rd2024 -Q "SELECT 1" &> /dev/null; then
            echo "SQL Server is ready"
            break
          fi
          echo "Waiting for SQL Server to be ready..."
          sleep 1
        done

    - name: Run tests
      env:
        MSSQL_HOST: localhost
        MSSQL_USER: sa
        MSSQL_PASSWORD: P@ssw0rd2024
        MSSQL_DATABASE: master
        MSSQL_DRIVER: "ODBC Driver 17 for SQL Server"
        MSSQL_TRUST_SERVER_CERTIFICATE: true
      run: |
        # Show driver configuration
        echo "Driver configuration:"
        cat /etc/odbcinst.ini
        
        # Test connection
        python3 -c "import os,pyodbc;d=os.environ;c=pyodbc.connect('Driver={'+d['MSSQL_DRIVER']+'};Server=tcp:'+d['MSSQL_HOST']+',1433;Database='+d['MSSQL_DATABASE']+';UID='+d['MSSQL_USER']+';PWD='+d['MSSQL_PASSWORD']+';TrustServerCertificate=yes;Encrypt=yes',timeout=30);print(c.cursor().execute('SELECT @@VERSION').fetchone()[0]);c.close()"
        
        # Run the actual tests
        python -m pytest -v

  test-azure-sql:
    name: Test with Azure SQL
    runs-on: ubuntu-latest
    
    services:
      azuresql:
        image: mcr.microsoft.com/azure-sql-edge:latest
        env:
          ACCEPT_EULA: Y
          MSSQL_SA_PASSWORD: TestPassword123!
        ports:
          - 1433:1433

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Wait for Azure SQL Edge to be ready
      run: |
        for i in {1..60}; do
          if /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123! -Q "SELECT 1" &> /dev/null; then
            echo "Azure SQL Edge is ready"
            break
          fi
          echo "Waiting for Azure SQL Edge to be ready..."
          sleep 1
        done
    
    - name: Run tests
      env:
        MSSQL_HOST: localhost
        MSSQL_USER: sa
        MSSQL_PASSWORD: TestPassword123!
        MSSQL_DATABASE: master
        MSSQL_TRUST_SERVER_CERTIFICATE: true
      run: |
        # Run all tests including security tests
        python -m pytest -v